THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
Merging one branch into another
like a feature branch into a related master branch will leave you with all the commits from both as well as a Merge branch
 This maintains the hashes of all the feature branches commits. This way if git sees those commits again say from a branch
 that was based off of the original feature branch git will recognize those commits and resolve them easily.
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
THIS FILE WILL DIFFERENT IN A
The golden rule of git rebase is to never use it on public branches.
iiiiiiiiiiiiiiiiiiii

Rewrites the selected commits ( all the commits from since a common ancestor)  and puts them at the front of a branch.
Since we are rewriting history this is a very dangerous thing to do






